{"version":3,"sources":["components/Location.js","components/Search.js","components/Counter.js","components/Counters.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Location","props","useState","age","setage","htmlFor","name","Date","toLocaleTimeString","onClick","prevAge","Search","searchTerm","setSearchTerm","id","type","onChange","event","target","value","Counter","this","getBadgeClasses","className","formatCount","onIncrement","counter","onDelete","classes","Component","Counters","onReset","counters","map","key","Navbar","totalCounters","href","welcome","stories","title","url","author","num_comments","points","objectID","Story","list","item","App","state","handleDelete","counterId","filter","c","setState","handleReset","handleIncrement","index","indexOf","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1cb6a4a4.chunk.js","sourcesContent":["import React, {useState} from 'react'\n\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\n\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\n\n\nconst Location = (props) => {\n\n    const [age, setage] = useState(0)\n\n    function increaseAge () {setage (prevAge => prevAge + 1) }\n\n    function decreaseAge () {setage (prevAge => prevAge - 1) }\n\n\nreturn (\n\n    <div>\n\n        <label htmlFor = 'name'>Location: {props.name} </label>\n        {' '}\n        <label htmlFor = 'lastname'>Time: {new Date().toLocaleTimeString()} </label>\n        {' '}\n        <>\n        <label htmlFor = 'email'>Age: </label>\n        <button onClick = {increaseAge}><ArrowUpwardIcon></ArrowUpwardIcon></button>\n        <span>{age}</span>\n        <button onClick={decreaseAge}><ArrowDownwardIcon></ArrowDownwardIcon></button>\n        </>        \n        \n    </div>\n\n)\n\n\n}\n\n\n\nexport default Location;\n\n\n\n","import React, { useState } from \"react\";\n\nconst Search = () => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const handleChange = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  return (\n    <div>\n      <h2>Searching Terms</h2>\n      <strong>\n        <button htmlFor=\"search\">Search: </button>\n      </strong>\n      <input id=\"search\" type=\"text\" onChange={handleChange} />\n\n      <p>\n        Searching for <strong>{searchTerm}</strong>\n      </p>\n    </div>\n  );\n};\n\nexport default Search;\n","import React, { Component } from \"react\";\n\nclass Counter extends Component {\n  render() {\n    this.getBadgeClasses();\n\n    return (\n      <div>\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n        <button\n          onClick={() => this.props.onIncrement(this.props.counter)}\n          className=\"btn btn-secondary btn-sm\"\n        >\n          Increment\n        </button>\n        <button\n          onClick={() => this.props.onDelete(this.props.counter.id)}\n          className=\"btn btn-danger btn-sm m-2\"\n        >\n          Delete\n        </button>\n      </div>\n    );\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const { value } = this.props.counter;\n    return value === 0 ? \"Zero\" : value;\n  }\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\n\nimport Counter from \"./Counter\";\n\nclass Counters extends Component {\n  render() {\n    const { onReset, counters, onDelete, onIncrement } = this.props;\n\n    return (\n      <div>\n        <h1>Counter Game</h1>\n        <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">\n          Reset\n        </button>\n        {counters.map((counter) => (\n          <Counter\n            key={counter.id}\n            onDelete={onDelete}\n            onIncrement={onIncrement}\n            counter={counter}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Counters;\n","import React, { Component } from \"react\";\n\nconst Navbar = ({ totalCounters }) => {\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"#\">\n        Navbar{\" \"}\n        <span className=\"badge badge-pill badge-secondary\">\n          {totalCounters}\n        </span>\n      </a>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\n\nimport Location from \"./components/Location\";\n\nimport Search from \"./components/Search\";\n\nimport Counters from \"./components/Counters\";\n\nimport Navbar from \"./components/Navbar\";\n\nconst welcome = {\n  Introduction: \"Tell me more about you and let's stay connected\",\n  Intro2: \"and remain friends.\",\n};\n\nfunction getTitle(title) {\n  return title;\n}\n\nconst stories = [\n  {\n    title: \"Git Repesotories\",\n    url: \"https://github.com/Rxklamdji?tab=repositories\",\n    author: \"Github\",\n    num_comments: \"1.\",\n    points: 4,\n    objectID: 0,\n  },\n\n  {\n    title: \"Youtube\",\n    url: \"https://www.youtube.com\",\n    author: \"Youtube\",\n    num_comments: \"2.\",\n    points: 4,\n    objectID: 0,\n  },\n];\n\nconst Story = (props) =>\n  props.list.map((item) => (\n    <div key={item.objectID}>\n      <span>{item.num_comments}</span>\n      <span>\n        <a href={item.url}>{item.title}</a>\n      </span>\n    </div>\n  ));\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 0 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ],\n  };\n\n  handleDelete = (counterId) => {\n    const counters = this.state.counters.filter((c) => c.id !== counterId);\n    this.setState({ counters });\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map((c) => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  handleIncrement = (counter) => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar\n          totalCounters={this.state.counters.filter((c) => c.value > 0).length}\n        />\n\n        <main className=\"container\">\n          <div className=\"App\">\n            <h1>Welcome To My World</h1>\n\n            <p>\n              {welcome.Introduction} {welcome.Intro2}\n            </p>\n\n            <h2>1. {getTitle(\"Location\")}</h2>\n\n            <p>\n              <Location name=\"Cabot, Arkansas, USA\" />\n            </p>\n\n            <hr />\n\n            <Story list={stories} />\n\n            <Search />\n\n            <hr />\n\n            <Counters\n              counters={this.state.counters}\n              onReset={this.handleReset}\n              onIncrement={this.handleIncrement}\n              onDelete={this.handleDelete}\n            />\n          </div>\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}